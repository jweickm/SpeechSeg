"0","# Create data objects"
"0",""
"0","data_dir <- paste(getwd(), ""/searchExp3_results"", sep = """")"
"0",""
"0","filePaths <- list.files(data_dir,""\\.txt$"",full.names= TRUE) # use regex search to save all txt-files in a list"
"0",""
"0","library(data.table) # load package 'data.table'"
"0","listData <- lapply(filePaths, fread) # use function 'fread' on the files in the list"
"0",""
"0","dataRaw <- rbindlist(listData)"
"0",""
"0","dataProcessed = dataRaw # create a working copy of the raw data"
"0","dataProcessed$cueCondition <- as.factor(dataRaw$cueCondition) # convert variables to factors"
"0","dataProcessed$targetValidity <- as.factor(dataRaw$targetValidity)"
"0",""
"0","dataProcessed$sbj <- as.factor(dataProcessed$sbj)"
"0","setkey(dataProcessed, block, answerCorrect) # sets a key to sort by column 'block' and then by column 'answerCorrect' within each group of column 'block'"
"0","sbjToDelete = as.integer("
"0","    dataProcessed[.('testing', 0), .N, by = sbj][which.max(dataProcessed[.('testing', 0), .N, by = sbj]$N),1])"
"0","# returns the subjekt ID of the row number with the highest N on the subset of rows that have a value of 'testing' for the 1st key and a value of '0' for the 2nd key"
"0","dataProcessed = dataProcessed[sbj != sbjToDelete] # remove the subject with the most false responses (why though?)"
"0","dataTesting = dataProcessed[block == 'testing'] # create subset of dataProcessed that only contains the 'testing' block"
"0",""
"0","library(outliers) # load package 'outliers'"
"0",""
"0","setkey(dataTesting, answerCorrect) # sort dataTesting by answerCorrect"
"0","errorRate = dataTesting[.(c(0,99)), .N, by = sbj]"
"0","errorRate[, 2] <- errorRate[, 2]*100/dataTesting[, .N, by = sbj][, 2]"
"0",""
"0","setkey(errorRate, sbj) # sort errorRate by sbj"
"0","setnames(errorRate,""N"",""Error Rate in %"")"
"0","setnames(errorRate, ""sbj"", ""Subject"")"
"0",""
"0","errorRateOutlier = errorRate[c(outlier(errorRate[, 2], logical = TRUE))] # using logical indexing using the 'outlier' function to identify the outlier subject"
"0",""
"0","dataCorrected = dataTesting[sbj != as.integer(errorRateOutlier[, 1])]"
"0",""
"0","# zuerst die Variablen, die umgewandelt werden sollen, definieren (in die Variable 'factors' speichern)"
"0","factors <- c(""block"", ""answerCorrect"", ""sex"", ""hand"", ""targetcolor"")"
"0",""
"0","setDT(dataCorrected)[, (factors) := lapply(.SD, as.factor), .SDcols = factors] # wendet die Funktion 'as.factor' auf alle Variablen im data frame 'dataRaw' mit dem gleichen Namen an"
"0","# answerCorrect"
"0","levels(dataCorrected$answerCorrect)[levels(dataCorrected$answerCorrect) == ""0""] <- ""wrong"""
"0","levels(dataCorrected$answerCorrect)[levels(dataCorrected$answerCorrect) == ""1""] <- ""correct"""
"0","levels(dataCorrected$answerCorrect)[levels(dataCorrected$answerCorrect) == ""99""] <- ""timeout"""
"0",""
"0","# sex"
"0","levels(dataCorrected$sex)[levels(dataCorrected$sex) == ""m""] <- ""male"""
"0","levels(dataCorrected$sex)[levels(dataCorrected$sex) == ""w""] <- ""female"""
"0",""
"0","# hand"
"0","levels(dataCorrected$hand)[levels(dataCorrected$hand) == ""l""] <- ""left"""
"0","levels(dataCorrected$hand)[levels(dataCorrected$hand) == ""r""] <- ""right"""
"0",""
"0","# targetcolor"
"0","levels(dataCorrected$targetcolor)[levels(dataCorrected$targetcolor) == ""a""] <- ""red_horizontal"""
"0","levels(dataCorrected$targetcolor)[levels(dataCorrected$targetcolor) == ""b""] <- ""green_vertical"""
"0","dataFiltered = dataCorrected["
"0","                        dataCorrected$reactionTime >= 0.150 &"
"0","                        dataCorrected$reactionTime <= 1.0 &"
"0","                        dataCorrected$answerCorrect != ""timeout""]"
"0","correctAnswers_dt = dataFiltered[dataFiltered$answerCorrect == 'correct'] # separate correct"
"0","```"
"2","Error: attempt to use zero-length variable name
"
